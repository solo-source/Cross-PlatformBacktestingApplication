# File: .github/workflows/release.yml
name: Release

on:
  push:
    # Trigger when a new tag is pushed
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # <-- This allows release creation and asset uploads

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  package:
    name: Build & Upload Artifacts
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            exe_name: ModularBacktester
            asset_name: ModularBacktester-linux
            build_mode: onefile
            add_data_sep: ':'
            asset_path: 'dist/ModularBacktester'
          - os: windows-latest
            exe_name: ModularBacktester.exe
            asset_name: ModularBacktester-windows.exe
            build_mode: onefile
            add_data_sep: ';'
            asset_path: 'dist/ModularBacktester.exe'
          - os: macos-latest
            exe_name: ModularBacktester.app
            asset_name: ModularBacktester-macos.zip
            build_mode: onedir
            add_data_sep: ':'
            asset_path: 'dist/ModularBacktester-macos.zip'
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build binary (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          if [ "${{ matrix.build_mode }}" = "onefile" ]; then
            pyinstaller --name "${{ matrix.exe_name }}" --onefile --windowed \
                       --add-data "templates${{ matrix.add_data_sep }}templates" \
                       --add-data "assets${{ matrix.add_data_sep }}assets" \
                       src/gui/main_window.py
          else
            pyinstaller --name "ModularBacktester" --onedir --windowed \
                       --add-data "templates${{ matrix.add_data_sep }}templates" \
                       --add-data "assets${{ matrix.add_data_sep }}assets" \
                       src/gui/main_window.py
            cd dist
            zip -r "ModularBacktester-macos.zip" "ModularBacktester.app"
            cd ..
          fi

      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          pyinstaller --name "${{ matrix.exe_name }}" --onefile --windowed \
                     --add-data "templates${{ matrix.add_data_sep }}templates" \
                     --add-data "assets${{ matrix.add_data_sep }}assets" \
                     src/gui/main_window.py

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream